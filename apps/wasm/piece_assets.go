package main

import (
	"bytes"
	"encoding/base64"
	"image/png"

	"github.com/hajimehoshi/ebiten/v2"
)

// embeddedPieceAssets contains base64-encoded PNG data for chess pieces
var embeddedPieceAssets = map[string]string{
	"b_b": "iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAYAAACOEfKtAAAABmJLR0QA/wD/AP+gvaeTAAAFPElEQVR4nO2c72tbVRjHP/2R9UeypVG3OhVFUTGTYLU4ig4UYR0S0b4wCIJvRFso7j/om0hBEOK7GVLZFHQSppLiL3ylVfeiKpWA2SIT3ZCKv2pLjXXtku764txbYtY05yb3nHvb3Q880KTnnvM8355zz7nPPafg4+Pj4+Pj4+Pj42ObNrcdqMMu4GHggPn5DDADlF3yZ1vxKHABMGrsPHDEPbe2B08BFa4Uz7IK8KRr3nmcfqBEffEsWwb2uuTjFbS77UAVzwIhiXJ7zLKewEsCPqCorFK8JKBM77PYo8wLm3hJwJ9tlL2gygm7eEnAnKKyVw1twJc0noVn8O4DgOv0A+eoL945s4zPJhwAPqZxD/wUuNclHz1JP/A6sE5j8SxbB04A+1zw11McAX5DXrha+xU4rN1rD9AOvAxcpnnxqnvjS3hrRaGUDuANWheu1t4GAvrCcIddwPs4L55l0+xwETOoE8+yE9qi0cwL2BAiEAgYqVTKSKVSRiAQsCvimMa4tHA7sIoNEeLxuGERj8ftCrgK3KkjMF0z1zGgy84Fvb29m/4sSRfwit2LmkGHgMOm6SYOPKK6kU7VDQBHZQoFAgGGhobo6hIdNRaLbfwuFouxtLQEwNraGrOzs5TLUi/ojiIe/bYtNyP5iJZOpw1Z0um07L2wAtyoMkDVQ3hYto2+vj7pSm2U7UDx7UN1Xu0k8LRMwXA4zMjIyMYQHhwcZHR0FICpqSnm5uYAMYSnp6dZXl6W9eEt4BmbfnuGPE0uiBOJxMaQTSQSrSysv1UZoOohrPT+I8l+lZWrFnB3sxdWz7KSM67jPniBP2hy6IVCISOXyxm5XM4IhUKtDOFftESqiALNB+6U5VUGqHoIf624fhm+Ulm5agFnFNcvw4zbDrRCL7CIe8N3AehRGaDqHvgv8KriNrbiGHDRxfYdoQf4Hv297yzQrTo4XVsk7kFkRa6p/jISibRccaVSoVQq1X69gEhlfddyAx7iPsSazAgGg0ahUJDOvjSiUCgYwWDQ6nnziD/YjiQCnI5Go46JZxGNRg3gC0A+reMAOhKq1QwBB4vFIuPj4wwMDDhSaT6fp1gsWvUPAZ84UrHHuAlYQv3ksQjcoCkmrZxE3wz8pqaYtLGfrc9/OG1l4Hodgel6rTmCSK/rohN4QldDyhkbGzs8MTFBMBjU0RwrKytMTk4OZzKZjJYGVZPNZhcdX7c0IJvNLuqITUcPbEsmk33d3d1ae2AymQwjnrQMlW3peJTrRCQVdG87u4TIBq2rbETHJFJBcVa4DnkUiwf6ZuEPNLVTzYcutKmMdmASezvxm7UK8CI7dM90DHgXcX9yWrg14BRwt7ZoXGQf8DzwDvAjzfXMdfPaU8BzuHQIW+eZMyt72oM4rrobIeStiN2kBxEnkHY1qOcSYrvGN4ijX+cR75//Rpx4t1L4Sw76XpdWBbwDOIQIPIroBRGEON0ofqFjg4uIbb8lhLB/IlL+eeA08INuhw4hzrU5cVDGbbsMfAQ86KhCdegDXmNnCLeZkBkg7JhaNdyC6PZuB6raziB21jrKXZgvhK4SmzdjdozjHghKtx2XEUY2G/MeYpusjoRACfgJ+Axxcwd4DPG/tG5Dz36/MiLmhthZxjwOTPH/I/dlxHosb9oC4j8LVW9gDrG58J2mrQIriKXGvFnHVlyHeEHVAwQRy6WKabWUgX+qPodN24t4dzwA3F/j3++IRb7U87vddWAH8BBwLWI9NVvj4HYkhHgVGgH+Aj5HQxbHx8fHx8fHx8dne/Mf1eRGDtjPj6gAAAAASUVORK5CYII=",
	"b_k": "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",
	// Add more pieces as needed...
	"w_k": "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",
	"w_p": "iVBORw0KGgoAAAANSUhEUgAAAFAAAABQCAYAAACOEfKtAAAABmJLR0QA/wD/AP+gvaeTAAAC+0lEQVR4nO2by29NURSHP+3FrYoQj1BtJUTEI0QiIiE1IKWMKvgLDEzFn1FiLEwkJuZiioEw9a4BiUjVRKsqIrab",
}

// loadEmbeddedPiece loads a piece from embedded base64 data
func loadEmbeddedPiece(pieceKey string) *ebiten.Image {
	data, exists := embeddedPieceAssets[pieceKey]
	if !exists {
		return nil
	}

	// Decode base64
	imgData, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return nil
	}

	// Decode PNG
	img, err := png.Decode(bytes.NewReader(imgData))
	if err != nil {
		return nil
	}

	// Convert to Ebiten image
	ebitenImg := ebiten.NewImageFromImage(img)

	// Scale to squareSize if needed
	w, h := ebitenImg.Size()
	if w != squareSize || h != squareSize {
		canvas := ebiten.NewImage(squareSize, squareSize)
		op := &ebiten.DrawImageOptions{}
		scaleX := float64(squareSize) / float64(w)
		scaleY := float64(squareSize) / float64(h)
		s := scaleX
		if scaleY < s {
			s = scaleY
		}
		op.GeoM.Scale(s, s)
		op.GeoM.Translate(float64(squareSize)/2-float64(w)*s/2, float64(squareSize)/2-float64(h)*s/2)
		canvas.DrawImage(ebitenImg, op)
		return canvas
	}

	return ebitenImg
}
