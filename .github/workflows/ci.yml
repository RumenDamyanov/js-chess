name: CI/CD Pipeline
permissions:
  contents: read

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  GO_VERSION: '1.23'

jobs:
  # Job 1: Basic validation and dependency installation
  setup-and-validate:
    name: Setup & Validate Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci

      - name: Lint SCSS (stylelint)
        run: |
          echo "Running stylelint for SCSS/CSS..."
          npm run lint:styles || (echo "❌ Stylelint failed" && exit 1)

      - name: Verify submodule backend
        run: |
          echo "Checking go-chess backend submodule..."
          ls -la backend/
          if [ -d "backend/go-chess" ]; then
            echo "✅ go-chess submodule found"
            ls -la backend/go-chess/
          else
            echo "❌ go-chess submodule missing"
            exit 1
          fi

      - name: Install frontend dependencies
        run: |
          echo "Installing dependencies for all frontend apps..."

          # Install Vue.js dependencies
          if [ -f "apps/vue-js/package.json" ]; then
            echo "Installing Vue.js dependencies..."
            cd apps/vue-js
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
            cd ../..
          fi

          # Install React dependencies
          if [ -f "apps/react-js/package.json" ]; then
            echo "Installing React dependencies..."
            cd apps/react-js
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
            cd ../..
          fi

          # Install Angular dependencies
          if [ -f "apps/angular/package.json" ]; then
            echo "Installing Angular dependencies..."
            cd apps/angular
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
            cd ../..
          fi

          # Install Vanilla TypeScript dependencies
          if [ -f "apps/vanilla-ts/package.json" ]; then
            echo "Installing Vanilla TypeScript dependencies..."
            cd apps/vanilla-ts
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
            cd ../..
          fi

      - name: Build backend dependencies
        run: |
          echo "Building go-chess backend..."
          cd backend/go-chess
          go mod download
          go mod verify
          echo "✅ Backend dependencies verified"

      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          required_dirs=("apps" "shared" "docker")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✅ $dir directory exists"
            else
              echo "❌ $dir directory missing"
              exit 1
            fi
          done

          # Check optional wiki directory (may be .gitignored)
          if [ -d "wiki" ]; then
            echo "✅ wiki directory exists"
          else
            echo "ℹ️ wiki directory not present (may be .gitignored for internal use)"
          fi

          echo "Checking Makefile..."
          if [ -f "Makefile" ]; then
            echo "✅ Makefile found"
          else
            echo "❌ Makefile missing"
            exit 1
          fi

  # Job 2: Frontend build validation
  frontend-builds:
    name: Frontend Build Tests
    runs-on: ubuntu-latest
    needs: setup-and-validate

    strategy:
      fail-fast: false
      matrix:
        # Add vanilla-js build (no package.json but we still compile shared styles), keep WIP excluded
        app: [vanilla-ts, vue-js]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Prepare shared styles (root install + build)
        run: |
          echo "Installing root dependencies & building shared styles (required for app-bundle.css)"
          npm ci
          npm run build:styles

      - name: Stylelint (matrix scope)
        run: |
          npm run lint:styles

      - name: Install dependencies for ${{ matrix.app }}
        run: |
          # Install dependencies if package.json exists for the matrix app.
          if [ -f "apps/${{ matrix.app }}/package.json" ]; then
            echo "Installing ${{ matrix.app }} dependencies..."
            cd apps/${{ matrix.app }}
            if [ -f "package-lock.json" ]; then
              npm ci
            else
              npm install
            fi
            cd ../..
          else
            echo "❌ package.json not found for ${{ matrix.app }}"; exit 1; fi

      - name: Build ${{ matrix.app }} application
        run: |
          cd apps/${{ matrix.app }}
          npm run build
          echo "✅ ${{ matrix.app }} build successful"

      - name: Report CSS bundle size
        run: |
          if [ -f "apps/${{ matrix.app }}/dist/assets/index-*.css" ]; then
            size=$(wc -c apps/${{ matrix.app }}/dist/assets/index-*.css | tail -1 | awk '{print $1}')
            echo "CSS_SIZE_BYTES=$size" >> $GITHUB_ENV
            echo "✅ CSS bundle size: $size bytes"
          fi

      - name: Validate build artifacts
        run: |
          cd apps/${{ matrix.app }}
          if [ -d "dist" ]; then
            echo "✅ ${{ matrix.app }} dist directory created"
            ls -la dist/
          else
            echo "❌ ${{ matrix.app }} dist directory missing"; exit 1; fi

  # Job 3: Docker integration tests
  docker-integration:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: setup-and-validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Compose configuration
        run: |
          echo "Validating docker-compose.yml..."
          if [ -f "docker-compose.yml" ]; then
            docker compose config
            echo "✅ Docker Compose configuration valid"
          else
            echo "❌ docker-compose.yml missing"
            exit 1
          fi

      - name: Build Docker images
        run: |
          echo "Building Docker images (active services only) sequentially to avoid npm 429 rate limits..."
          # Excluding WIP frameworks: chess-react, chess-angular
          set -e
          for svc in chess-backend chess-landing chess-vanilla chess-vanilla-ts chess-jquery chess-vue; do
            echo "--- Building $svc ---"
            docker compose build $svc
          done
          echo "✅ Active Docker images built successfully (sequential)"

      - name: Start services
        run: |
          echo "Starting active services (excluding WIP react/angular)..."
          docker compose up -d chess-backend chess-landing chess-vanilla chess-vanilla-ts chess-jquery chess-vue

          echo "Waiting for services to start..."
          sleep 30

          echo "Checking container status..."
          docker compose ps

      - name: Health check - Backend API
        run: |
          echo "Testing backend API health..."
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts - Testing backend on port 8080..."
            if curl -f -s http://localhost:8080/health || curl -f -s http://localhost:8080/api/health; then
              echo "✅ Backend API is responding"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo "❌ Backend API failed to respond after $max_attempts attempts"
              docker compose logs backend
              exit 1
            else
              echo "Backend not ready, waiting 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

      - name: Health check - Frontend services
        run: |
          echo "Testing frontend services..."

          services=(
            "3000:Landing Page"
            "3001:Vanilla JS"
            "3002:Vanilla TypeScript"
            "3003:jQuery"
            "3004:Vue 3"
          )

          for service in "${services[@]}"; do
            port=$(echo $service | cut -d: -f1)
            name=$(echo $service | cut -d: -f2)

            echo "Testing $name on port $port..."
            max_attempts=5
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              if curl -f -s http://localhost:$port > /dev/null; then
                echo "✅ $name is responding on port $port"
                break
              elif [ $attempt -eq $max_attempts ]; then
                echo "⚠️ $name not responding on port $port (may not be implemented yet)"
                # Don't fail the build for frontend services that might not exist yet
                break
              else
                echo "Waiting for $name..."
                sleep 5
                attempt=$((attempt + 1))
              fi
            done
          done

      - name: Test API endpoints
        run: |
          echo "Testing key API endpoints..."

          # Test creating a new game
          echo "Testing game creation..."
          response=$(curl -s -X POST http://localhost:8080/api/games \
            -H "Content-Type: application/json" \
            -d '{"ai_enabled": true, "difficulty": "medium"}')

          if echo "$response" | grep -q "id\|ID"; then
            echo "✅ Game creation endpoint working"
          else
            echo "⚠️ Game creation endpoint response: $response"
          fi

      - name: Container logs (on failure)
        if: failure()
        run: |
          echo "=== Container Status ==="
          docker compose ps

          echo "=== Backend Logs ==="
          docker compose logs backend

          echo "=== Frontend Logs ==="
          docker compose logs landing chess-vanilla chess-vanilla-ts chess-jquery || true

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          docker compose down -v
          docker system prune -f

  # Job 4: Cross-platform compatibility
  cross-platform:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    needs: setup-and-validate

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test Makefile commands
        run: |
          echo "Testing Makefile help command..."
          make help

          echo "Testing Make environment setup..."
          # Test non-Docker make commands
          if command -v make >/dev/null 2>&1; then
            echo "✅ Make is available"
          else
            echo "❌ Make is not available"
            exit 1
          fi

      - name: Validate environment setup
        run: |
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Go version: $(go version)"
          echo "OS: ${{ matrix.os }}"
          echo "✅ Environment validation complete"

  # Job 5: Quality checks and linting
  quality-checks:
    name: Quality & Security Checks
    runs-on: ubuntu-latest
    needs: setup-and-validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install root dependencies (for stylelint)
        run: |
          echo "Installing root dependencies for quality checks..."
          npm ci

      - name: Check for common issues
        run: |
          echo "Checking for common configuration issues..."

          # Check for .env.example
          if [ -f ".env.example" ]; then
            echo "✅ .env.example found"
          else
            echo "⚠️ .env.example not found"
          fi

          # Check for .gitignore
          if [ -f ".gitignore" ]; then
            echo "✅ .gitignore found"
            # Check if common items are ignored
            if grep -q "node_modules" .gitignore; then
              echo "✅ node_modules in .gitignore"
            else
              echo "⚠️ node_modules not in .gitignore"
            fi
          else
            echo "❌ .gitignore missing"
            exit 1
          fi

      - name: Validate documentation
        run: |
          echo "Checking documentation files..."

          docs=("README.md" "CONTRIBUTING.md" "LICENSE.md" "SECURITY.md" "FUNDING.md" "CHANGELOG.md")
          for doc in "${docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ $doc exists"
            else
              echo "⚠️ $doc missing"
            fi
          done

          # Check wiki directory (optional - may be .gitignored)
          if [ -d "wiki" ]; then
            echo "✅ Wiki directory exists"
            wiki_files=$(find wiki -name "*.md" | wc -l)
            echo "📚 Found $wiki_files wiki documentation files"
          else
            echo "ℹ️ Wiki directory not present (articles published on GitHub wiki)"
          fi

      - name: Security scan
        run: |
          echo "Running basic security checks..."
      - name: SCSS Lint (redundant safety)
        run: |
          echo "Re-running stylelint as safety net in quality job..."
          npm run lint:styles

          # Check for potential secrets in repository
          if grep -r -i "password\|secret\|token\|key" --include="*.js" --include="*.ts" --include="*.json" . | grep -v node_modules | grep -v ".git" | head -5; then
            echo "⚠️ Potential secrets found - please review"
          else
            echo "✅ No obvious secrets detected"
          fi

  # Summary job
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [setup-and-validate, frontend-builds, docker-integration, cross-platform, quality-checks]
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Dependencies installed and validated"
          echo "✅ Frontend builds completed"
          echo "✅ Docker integration working"
          echo "✅ Cross-platform compatibility verified"
          echo "✅ Quality checks passed"
          echo ""
          echo "The JS Chess project is ready for deployment! 🚀"
